#!/usr/bin/env python2.7

# oci-utils
#
# Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at http://oss.oracle.com/licenses/upl.

"""
Oracle Cloud Infrastructure utilities - daemon that polls for iscsi
and network configuration changes.
"""

import os
import sys
import time
import socket
import daemon
import json
import argparse
import logging
from logging.handlers import SysLogHandler
import lockfile
import posixfile
import oci_utils
import oci_utils.iscsiadm
import subprocess
from oci_utils.cache import load_cache, write_cache, get_timestamp

__ocid_logger = logging.getLogger('ocid')
__log_level = logging.INFO

__virtual_functions = 16

def setup_logging(syslog=False):
    global __ocid_logger
    global __log_level
    if syslog:
        handler = SysLogHandler(address='/dev/log',
                                facility=SysLogHandler.LOG_DAEMON)
    else:
        handler = logging.StreamHandler(stream=sys.stderr)
    handler.setLevel(__log_level)
    formatter = logging.Formatter('%(name)s - %(levelname)s '
                                  '- %(message)s')
    handler.setFormatter(formatter)
    __ocid_logger.setLevel(__log_level)
    __ocid_logger.addHandler(handler)
    __ocid_logger.info('oci daemon starting')

def parse_args():
    '''
    Parse the command line arguments and return an object representing the
    command line (as returned by argparse's parse_args())
    '''
    parser = argparse.ArgumentParser(description='oci-utils daemon')
    parser.add_argument('--refresh', action='store_true',
                        help='scan for iSCSI devices and update the cached '
                        'data')
    parser.add_argument('--no-daemon', action='store_true',
                        help='run ocid in the foreground, useful for debugging')
    parser.add_argument('--debug', action='store_true',
                        help='display diagnostic output'),
    parser.add_argument('--service', action='store_true',
                        help='if ocid is running as a daemon, execute all tasks exactly once before forking')
    parser.add_argument('--skip-network', action='store_true',
                        help='prevents ocid from automatically configuring vnics')

    args = parser.parse_args()
    return args

def update_network_config():
    output = ""
    try:
        output = subprocess.check_output(
            ['/usr/bin/oci-network-config', '--auto'],
            stderr=subprocess.STDOUT)
        for line in output.split('\n'):
            if line.startswith('Info: '):
                line = line[6:]
            if line:
                __ocid_logger.info(line)
    except OSError as e:
        __ocid_logger.error('failed to execute '
                            '/usr/bin/oci-network-config')
        return 100
    except subprocess.CalledProcessError as e:
        __ocid_logger.error('failed to configure secondary VNICs')
        for line in output.split('\n'):
            if line:
                __ocid_logger.info(line)
        __ocid_logger.error(e.output)
        return e.returncode
    return 0
    
def daemon_main(args):
    """
    Main program
    """
    # iscsi devices we couldn't connect to and the error code
    attach_failed = {}
    # iscsi devices in the current session
    session_devs = {}
    # all IQNs discovered
    all_iqns = {}
    ignore_ts = 0
    vnics = oci_utils.metadata(get_public_ip=False).filter('vnics')
    if vnics is not None and 'vnics' in vnics:
        # deep copy
        vnics = [dict(x) for x in vnics['vnics']]
    else:
        vnics = []
    if not args.skip_network:
        __ocid_logger.info("updating VNIC configuration")
        update_network_config()
    if args.refresh and args.no_daemon:
        print "Scanning for iSCSI devices"
    # write cache files once on startup, even if they are empty
    data_changed = True
    while True:
        new_iqns = {}
        detached_iqns = {}
        if ignore_ts == 0 or \
           get_timestamp(oci_utils.__ignore_file) > ignore_ts:
            # has the list of manually detached devices changed?
            ignore_ts, ignore = load_cache(oci_utils.__ignore_file)
        if ignore is None:
            ignore = []
        for r in range(20):
            ipaddr = "169.254.2.%d" % (r+1)
            iqns = oci_utils.iscsiadm.discovery(ipaddr)
            if iqns:
                if ipaddr in all_iqns:
                    # devices were previously discovered at this address
                    if iqns != all_iqns[ipaddr]:
                        # list of iqns present at the given ipaddr changed
                        __ocid_logger.debug('IQNs exported at %s changed: '
                                            '%s -> %s' % \
                                            (ipaddr, all_iqns[ipaddr], iqns))
                        all_iqns[ipaddr] = iqns
                        data_changed = True
                        new_iqns[ipaddr] = iqns
                else:
                    # devices discovered at a new address
                    __ocid_logger.debug('New devices discovered at %s: %s' % \
                                        (ipaddr, iqns))
                    all_iqns[ipaddr] = iqns
                    data_changed = True
                    new_iqns[ipaddr] = iqns
            else:
                # no devices present at the given ipaddr
                if ipaddr in all_iqns:
                    __ocid_logger.debug('Device(s) no longer available at %s: '
                                        '%s' % \
                                        (ipaddr, all_iqns[ipaddr]))
                    # delete previously discovered devices
                    detached_iqns[ipaddr] = all_iqns[ipaddr]
                    del(all_iqns[ipaddr])
                    data_changed = True

        session_devs = oci_utils.iscsiadm.session()
        # check if all discovered iscsi devices are configured and attached
        for ipaddr in new_iqns.keys():
            for iqn in new_iqns[ipaddr]:
                if iqn not in session_devs:
                    if iqn in attach_failed:
                        # previous attempt to attach failed, ignore
                        continue
                    if iqn in ignore:
                        # a device that was manually detached, so don't
                        # re-attach it automatically
                        continue
                    # configure and attach the device
                    __ocid_logger.info("Attaching iscsi device: %s:%s (%s)" % \
                                       (ipaddr, "3260", iqn))
                    attach_result = \
                        oci_utils.iscsiadm.attach(ipaddr, 3260, iqn,
                                                  auto_startup=True)
                    if attach_result != 0:
                        attach_failed[iqn] = attach_result
                        data_changed = True

        for iqn in attach_failed.keys():
            if iqn in session_devs:
                # previously failed attach is now in the session
                # (e.g. attached using oci-iscsi-config or
                # using iscsiadm directly)
                del(attach_failed[iqn])
                data_changed = True

        write_ignore = False
        
        # look for disconnected devices in the current session
        for iqn in session_devs:
            if session_devs[iqn]['state'] in ['blocked', 'transport-offline']:
                # is the iqn discoverable at the portal?
                ipaddr = session_devs[iqn]['persistent_portal_ip']
                if ipaddr in detached_iqns:
                    # we will disconnect this in the next step
                    continue
                if ipaddr not in all_iqns or iqn not in all_iqns[ipaddr]:
                    # device no longer found by discovery
                    __ocid_logger.info("Detaching iscsi device: %s:%s (%s)" % \
                                       (ipaddr, "3260", iqn))
                    oci_utils.iscsiadm.detach(ipaddr, 3260, iqn)
                    # device is gone, remove from "ignore" list
                    if iqn in ignore:
                        ignore.remove(iqn)
                        write_ignore = True
                    # remove from attach_failed list if present
                    if iqn in attach_failed:
                        del(attach_failed[iqn])
                        data_changed = True

        # check if the devices in "ignore" are still present
        for iqn in ignore:
            iqn_found = False
            for ipaddr in all_iqns.keys():
                if iqn in all_iqns[ipaddr]:
                    iqn_found = True
                    break
            if not iqn_found:
                ignore.remove(iqn)
                write_ignore = True

        for ipaddr in detached_iqns.keys():
            for iqn in detached_iqns[ipaddr]:
                if ipaddr not in all_iqns or\
                   iqn not in all_iqns[ipaddr]:
                    # device no longer found by discovery
                    __ocid_logger.info("Detaching iscsi device: %s:%s (%s)" % \
                                       (ipaddr, "3260", iqn))
                    oci_utils.iscsiadm.detach(ipaddr, 3260, iqn)
                    # device is gone, remove from "ignore" list
                    if iqn in ignore:
                        ignore.remove(iqn)
                        write_ignore = True
                    # remove from attach_failed list if present
                    if iqn in attach_failed:
                        del(attach_failed[iqn])
                        data_changed = True

        if data_changed:
            write_cache(cache_content=[all_iqns, attach_failed],
                        cache_fname=oci_utils.iscsiadm.ISCSIADM_CACHE)
        else:
            try:
                os.utime(oci_utils.iscsiadm.ISCSIADM_CACHE, None)
            except Exception as e:
                __ocid_logger.warn("Failed to update cache timestamp: %s" % e)

        data_changed = False

        if write_ignore:
            ignore_ts = write_cache(cache_content=ignore,
                                    cache_fname=oci_utils.__ignore_file)
            if ignore_ts is None:
                ignore_ts = 0

        if args.refresh:
            # run once only
            return 0

        # update the metadata cache
        oci_utils.metadata().refresh(get_public_ip=False)
        new_vnics = oci_utils.metadata().filter('vnics')
        if new_vnics is not None and 'vnics' in new_vnics:
            if new_vnics['vnics'] != vnics:
                # VNIC configuration changed
                if not args.skip_network:
                    __ocid_logger.info("VNIC configuration changed, "
                                       "updating network interfaces")
                    update_network_config()
                # deep copy
                vnics = [dict(x) for x in new_vnics['vnics']]

        time.sleep(60)


if os.geteuid() != 0:
    sys.stderr.write("This program must be run as root.\n")
    sys.exit(1)

pidlock = lockfile.FileLock('/var/run/ocid.pid')

args = parse_args()

if pidlock.is_locked():
    if not args.refresh:
        sys.stderr.write("ocid already running.\n")
    sys.exit(1)

oci_utils.iscsiadm.set_logger(__ocid_logger)

if args.debug:
    __log_level = logging.DEBUG

if args.no_daemon:
    setup_logging(syslog=False)
    sys.exit(daemon_main(args))
else:
    setup_logging(syslog=True)
    # TODO: replace this cheesy hack.
    # To ensure that all services provided by ocid
    # have executed at least once before a service
    # manager thinks that ocid is ready, a --no-daemon
    # --refresh execution is performed prior to forking
    if args.service:
        refresh_orig = args.refresh
        args.no_daemon = True
        args.refresh = True
        daemon_main(args)
        args.refresh = refresh_orig
    context = daemon.DaemonContext(
        pidfile=pidlock,
        umask=0o033
        )
    with context:
        daemon_main(args)

