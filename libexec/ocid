#!/usr/bin/env python2.7

# oci-utils
#
# Copyright (c) 2017 Oracle and/or its affiliates. All rights reserved.
#
# The Universal Permissive License (UPL), Version 1.0
#
# Subject to the condition set forth below, permission is hereby granted to
# any person obtaining a copy of this software, associated documentation
# and/or data (collectively the "Software"), free of charge and under any
# and all copyright rights in the Software, and any and all patent rights
# owned or freely licensable by each licensor hereunder covering either
# (i) the unmodified Software as contributed to or provided by such licensor, or
# (ii) the Larger Works (as defined below), to deal in both
# (a) the Software, and
# (b) any piece of software and/or hardware listed in the lrgrwrks.txt
# file if one is included with the Software (each a "Larger Work" to which
# the Software is contributed by such licensors),
#
# without restriction, including without limitation the rights to copy,
# create derivative works of, display, perform, and distribute the Software
# and make, use, sell, offer for sale, import, export, have made, and have
# sold the Software and the Larger Work(s), and to sublicense the foregoing
# rights on either these or other terms.
#
# This license is subject to the following condition:
#
# The above copyright notice and either this complete permission notice or
# at a minimum a reference to the UPL must be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

"""
Oracle Cloud Infrastructure utilities - daemon that polls for iscsi
and network configuration changes.
"""

import os
import sys
import time
import socket
import daemon
import json
import argparse
import logging
from logging.handlers import SysLogHandler
import lockfile
import posixfile
import oci_utils
import oci_utils.iscsiadm
from oci_utils.cache import load_cache, write_cache, get_timestamp

__ocid_logger = logging.getLogger('ocid')
__log_level = logging.INFO

def setup_logging(syslog=False):
    if syslog:
        handler = SysLogHandler(address='/dev/log',
                                facility=SysLogHandler.LOG_DAEMON)
    else:
        handler = logging.StreamHandler(stream=sys.stderr)
    handler.setLevel(__log_level)
    formatter = logging.Formatter('%(name)s - %(levelname)s '
                                  '- %(message)s')
    handler.setFormatter(formatter)
    __ocid_logger.setLevel(__log_level)
    __ocid_logger.addHandler(handler)
    __ocid_logger.info('oci daemon starting')

def parse_args():
    '''
    Parse the command line arguments and return an object representing the
    command line (as returned by argparse's parse_args())
    '''
    parser = argparse.ArgumentParser(description='oci-utils daemon')
    parser.add_argument('--refresh', action='store_true',
                        help='scan for iSCSI devices and update the cached '
                        'data')
    parser.add_argument('--no-daemon', action='store_true',
                        help='run ocid in the foreground, useful for debugging')
    parser.add_argument('--debug', action='store_true',
                        help='display diagnostic output'),

    args = parser.parse_args()
    return args

    
def daemon_main(args):
    """
    Main program
    """
    # iscsi devices we couldn't connect to and the error code
    attach_failed = {}
    # iscsi devices in the current session
    session_devs = {}
    # all IQNs discovered
    all_iqns = {}
    ignore_ts = 0
    if args.refresh and args.no_daemon:
        print "Scanning for iSCSI devices"
    while True:
        data_changed = False
        new_iqns = {}
        detached_iqns = {}
        if ignore_ts == 0 or \
           get_timestamp(oci_utils.__ignore_file) > ignore_ts:
            # has the list of manually detached devices changed?
            ignore_ts, ignore = load_cache(oci_utils.__ignore_file)
        if ignore is None:
            ignore = []
        for r in range(20):
            ipaddr = "169.254.2.%d" % (r+1)
            iqns = oci_utils.iscsiadm.discovery(ipaddr)
            if iqns:
                if ipaddr in all_iqns:
                    # devices were previously discovered at this address
                    if iqns != all_iqns[ipaddr]:
                        # list of iqns present at the given ipaddr changed
                        __ocid_logger.debug('IQNs exported at %s changed: '
                                            '%s -> %s' % \
                                            (ipaddr, all_iqns[ipaddr], iqns))
                        all_iqns[ipaddr] = iqns
                        data_changed = True
                        new_iqns[ipaddr] = iqns
                else:
                    # devices discovered at a new address
                    __ocid_logger.debug('New devices discovered at %s: %s' % \
                                        (ipaddr, iqns))
                    all_iqns[ipaddr] = iqns
                    data_changed = True
                    new_iqns[ipaddr] = iqns
            else:
                # no devices present at the given ipaddr
                if ipaddr in all_iqns:
                    __ocid_logger.debug('Device(s) no longer available at %s: '
                                        '%s' % \
                                        (ipaddr, all_iqns[ipaddr]))
                    # delete previously discovered devices
                    detached_iqns[ipaddr] = all_iqns[ipaddr]
                    del(all_iqns[ipaddr])
                    data_changed = True

        session_devs = oci_utils.iscsiadm.session()
        # check if all discovered iscsi devices are configured and attached
        for ipaddr in new_iqns.keys():
            for iqn in new_iqns[ipaddr]:
                if iqn not in session_devs:
                    if iqn in attach_failed:
                        # previous attempt to attach failed, ignore
                        continue
                    if iqn in ignore:
                        # a device that was manually detached, so don't
                        # re-attach it automatically
                        continue
                    # configure and attach the device
                    __ocid_logger.info("Attaching iscsi device: %s:%s (%s)" % \
                                       (ipaddr, "3260", iqn))
                    attach_result = \
                        oci_utils.iscsiadm.attach(ipaddr, 3260, iqn,
                                                  auto_startup=True)
                    if attach_result != 0:
                        attach_failed[iqn] = attach_result
                        data_changed = True
                else:
                    if iqn in attach_failed:
                        # previously failed attach is now in the session
                        # (e.g. attached using oci-iscsi-config or
                        # using iscsiadm directly)
                        del(attach_failed[iqn])
                        data_changed = True

        if data_changed:
            write_cache(cache_content=[all_iqns, attach_failed],
                        cache_fname=oci_utils.iscsiadm.ISCSIADM_CACHE)

        # look for disconnected devices in the current session
        for iqn in session_devs:
            if session_devs[iqn]['state'] in ['blocked', 'transport-offline']:
                # is the iqn discoverable at the portal?
                ipaddr = session_devs[iqn]['persistent_portal_ip']
                if ipaddr in detached_iqns:
                    # we will disconnect this in the next step
                    continue
                if ipaddr not in all_iqns or iqn not in all_iqns[ipaddr]:
                    # device no longer found by discovery
                    __ocid_logger.info("Detaching iscsi device: %s:%s (%s)" % \
                                       (ipaddr, "3260", iqn))
                    oci_utils.iscsiadm.detach(ipaddr, 3260, iqn)

        for ipaddr in detached_iqns.keys():
            for iqn in detached_iqns[ipaddr]:
                if ipaddr not in all_iqns or\
                   iqn not in all_iqns[ipaddr]:
                    # device no longer found by discovery
                    __ocid_logger.info("Detaching iscsi device: %s:%s (%s)" % \
                                       (ipaddr, "3260", iqn))
                    oci_utils.iscsiadm.detach(ipaddr, 3260, iqn)

        # update the metadata cache
        oci_utils.metadata().refresh()

        if args.refresh:
            # run once only
            return 0

        time.sleep(60)


if os.geteuid() != 0:
    sys.stderr.write("This program must be run as root.\n")
    sys.exit(1)

pidlock = lockfile.FileLock('/var/run/ocid.pid')

if pidlock.is_locked():
    sys.stderr.write("ocid already running.\n")
    sys.exit(1)

oci_utils.iscsiadm.set_logger(__ocid_logger)

args = parse_args()

if args.debug:
    __log_level = logging.DEBUG

if args.no_daemon:
    setup_logging(syslog=False)
    sys.exit(daemon_main(args))
else:
    setup_logging(syslog=True)
    context = daemon.DaemonContext(
        pidfile=pidlock,
        umask=0o033
        )
    with context:
        daemon_main(args)

