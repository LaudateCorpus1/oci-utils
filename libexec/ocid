#!/usr/bin/env python2.7

# oci-utils
#
# Copyright (c) 2017 Oracle and/or its affiliates. All rights reserved.
#
# The Universal Permissive License (UPL), Version 1.0
#
# Subject to the condition set forth below, permission is hereby granted to
# any person obtaining a copy of this software, associated documentation
# and/or data (collectively the "Software"), free of charge and under any
# and all copyright rights in the Software, and any and all patent rights
# owned or freely licensable by each licensor hereunder covering either
# (i) the unmodified Software as contributed to or provided by such licensor, or
# (ii) the Larger Works (as defined below), to deal in both
# (a) the Software, and
# (b) any piece of software and/or hardware listed in the lrgrwrks.txt
# file if one is included with the Software (each a “Larger Work” to which
# the Software is contributed by such licensors),
#
# without restriction, including without limitation the rights to copy,
# create derivative works of, display, perform, and distribute the Software
# and make, use, sell, offer for sale, import, export, have made, and have
# sold the Software and the Larger Work(s), and to sublicense the foregoing
# rights on either these or other terms.
#
# This license is subject to the following condition:
#
# The above copyright notice and either this complete permission notice or
# at a minimum a reference to the UPL must be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

"""
Oracle Cloud Infrastructure utilities - daemon that polls for iscsi
and network configuration changes.
"""

import os
import sys
import time
import socket
import daemon
import json
import logging
from logging.handlers import SysLogHandler
import lockfile
import posixfile
import oci_utils.iscsiadm

GLOBAL_CACHE = "/var/cache/oci-utils/iscsiadm-cache"
__ocid_logger = logging.getLogger('ocid')
__log_level = logging.INFO

def setup_logging():
    handler = SysLogHandler(address='/dev/log',
                            facility=SysLogHandler.LOG_DAEMON)
    handler.setLevel(__log_level)
    formatter = logging.Formatter('%(name)s - %(levelname)s '
                                  '- %(message)s')
    handler.setFormatter(formatter)
    __ocid_logger.setLevel(__log_level)
    __ocid_logger.addHandler(handler)
    __ocid_logger.info('oci daemon starting')

def daemon_main():
    """
    Main program
    """
    # iscsi devices we couldn't connect to (typically auth error)
    attach_failed = {}
    iscsi_devs = {}
    all_iqns = {}
    while True:
        # save result of previous discovery so we can later check
        # which devices are gone
        prev_iqns = all_iqns
        # all IQNs discovered
        all_iqns = {}
        cache_file = None
        for r in range(20):
            ipaddr = "169.254.2.%d" % (r+1)
            iqns = oci_utils.iscsiadm.discovery(ipaddr)
            if iqns:
                all_iqns[ipaddr] = iqns
        try:
            cachedir = os.path.dirname(GLOBAL_CACHE)
            if not os.path.exists(cachedir):
                os.makedirs(cachedir)
            if not os.path.exists(GLOBAL_CACHE):
                cache_file = posixfile.open(GLOBAL_CACHE, 'w+')
            else:
                cache_file = posixfile.open(GLOBAL_CACHE, 'r+')
        except (OSError, IOError):
            # can't write to global cache dir, try the user dir
            # FIXME: write error to log
            pass

        if cache_file is not None:
            cache_file.lock("w|")
            cache_file.write(json.dumps(all_iqns))
            cache_file.truncate()
            cache_file.lock("u")
            cache_file.close()

        iscsi_devs = oci_utils.iscsiadm.session()
        # check if all discovered iscsi devices are configured and attached
        for ipaddr in all_iqns.keys():
            for iqn in all_iqns[ipaddr]:
                if ipaddr in attach_failed \
                   and attach_failed[ipaddr] == iqn:
                    continue
                if ipaddr not in iscsi_devs or \
                   iqn not in iscsi_devs[ipaddr]:
                    # configure and attach the device
                    __ocid_logger.info("Attaching iscsi device: %s:%s (%s)" % \
                                       (ipaddr, "3260", iqn))
                    if not oci_utils.iscsiadm.attach(ipaddr, 3260, iqn,
                                                     auto_startup=True):
                        attach_failed[ipaddr] = iqn
        for ipaddr in prev_iqns.keys():
            for iqn in prev_iqns[ipaddr]:
                if ipaddr not in all_iqns or\
                   iqn not in all_iqns[ipaddr]:
                    # means the device was disconnected
                    __ocid_logger.info("Detaching iscsi device: %s:%s (%s)" % \
                                       (ipaddr, "3260", iqn))
                    oci_utils.iscsiadm.detach(ipaddr, 3260, iqn)
        # update the metadata cache
        oci_utils.metadata().refresh()
        time.sleep(30)


if os.geteuid() != 0:
    sys.stderr.write("This program must be run as root.\n")
    sys.exit(1)

pidlock = lockfile.FileLock('/var/run/ocid.pid')

if pidlock.is_locked():
    sys.stderr.write("ocid already running.\n")
    sys.exit(1)

setup_logging()
oci_utils.iscsiadm.set_logger(__ocid_logger)

context = daemon.DaemonContext(
    pidfile=pidlock,
    umask=0o033
    )
with context:
    daemon_main()
