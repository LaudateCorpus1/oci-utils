#!/usr/bin/env python2.7

# oci-utils
#
# Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at http://oss.oracle.com/licenses/upl.

'''
Script for printing the public IP address of a system.
Uses STUN (https://www.voip-info.org/wiki-STUN), implemented in
pystun.
'''

import sys
import argparse
import logging
try:
    import json
except ImportError:
    import simplejson as json
from oci_utils.packages.stun import get_ip_info, STUN_SERVERS, log as stun_log
import oci_utils.oci_api

def parse_args():
    '''
    Parse the command line arguments and return an object representing the
    command line (as returned by argparse's parse_args())
    '''
    parser = argparse.ArgumentParser(description='Utility for displaying the '
                                     'public IP address of the current OCI '
                                     'instance.', add_help=False)
    parser.add_argument('-h', '--human-readable', action='store_true',
                        help='Display human readable output (default)')
    parser.add_argument('-j', '--json', action='store_true',
                        help='Display json output')
    parser.add_argument('-g', '--get', action='store_true',
                        help='Print the IP address only')
    parser.add_argument('-s', '--sourceip', action='store', default="0.0.0.0",
                        help='Specify the source IP address to use'),
    parser.add_argument('-S', '--stun-server', action='store',
                        help='Specify the STUN server to use'),
    parser.add_argument('-L', '--list-servers', action='store_true',
                        help='Print a list of known STUN servers and exit'),
    parser.add_argument('--instance-id', metavar='OCID', action='store',
                        help='Display the public IP address of the given '
                        'instance instead of the current one.  Requires '
                        'the OCI Python SDK to be installed and configured')
    parser.add_argument('--debug', action='store_true',
                        help='Display diagnostic output'),
    parser.add_argument('--help', action='help',
                        help='Display this help')

    args = parser.parse_args()
    return args

def main():
    '''
    Main program.
    '''

    args = parse_args()

    if args.debug:
        debug_handler = logging.StreamHandler(stream=sys.stderr)
        stun_log.addHandler(debug_handler)
        stun_log.setLevel(logging.DEBUG)

    if args.list_servers:
        # print the list of known STUN servers and exit
        for server in STUN_SERVERS:
            print server
        sys.exit(0)

    external_ip = None
    if oci_utils.oci_api.HAVE_OCI_SDK or args.instance_id is not None:
        # try the OCI APIs first
        try:
            sess = oci_utils.oci_api.OCISession()
            inst = None
            if args.instance_id is not None:
                inst = sess.get_instance(args.instance_id)
                if inst is None:
                    sys.stderr.write("Instance not found: %s\n" \
                                     % args.instance_id)
                    sys.exit(1)
            else:
                inst = sess.this_instance()    
            for vnic in inst.all_vnics():
                if vnic.get_public_ip() is not None:
                    external_ip = vnic.get_public_ip()
                    break
        except oci_utils.oci_api.OCISDKError:
            if args.instance_id is not None:
                sys.stderr.write("The OCI Python SDK must be installed and "
                                 "configured when using the --instance-id "
                                 "option.\n")
                sys.exit(1)

    if external_ip is None:
        # fall back to pystun
        external_ip = get_ip_info(source_ip=args.sourceip,
                                  stun_host=args.stun_server)[1]

    if external_ip is not None:
        if args.json:
            print json.dumps({'publicIp': external_ip})
        elif args.get:
            print external_ip
        else:
            print "Public IP address: %s" % external_ip

        return 0
    else:
        sys.stderr.write("Failed to determine public IP address.\n")
        return 1

sys.exit(main())
