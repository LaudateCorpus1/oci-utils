#!/usr/bin/env python2.7

# oci-utils
#
# Copyright (c) 2017 Oracle and/or its affiliates. All rights reserved.
#
# The Universal Permissive License (UPL), Version 1.0
#
# Subject to the condition set forth below, permission is hereby granted to
# any person obtaining a copy of this software, associated documentation
# and/or data (collectively the "Software"), free of charge and under any
# and all copyright rights in the Software, and any and all patent rights
# owned or freely licensable by each licensor hereunder covering either
# (i) the unmodified Software as contributed to or provided by such licensor, or
# (ii) the Larger Works (as defined below), to deal in both
# (a) the Software, and
# (b) any piece of software and/or hardware listed in the lrgrwrks.txt
# file if one is included with the Software (each a "Larger Work" to which
# the Software is contributed by such licensors),
#
# without restriction, including without limitation the rights to copy,
# create derivative works of, display, perform, and distribute the Software
# and make, use, sell, offer for sale, import, export, have made, and have
# sold the Software and the Larger Work(s), and to sublicense the foregoing
# rights on either these or other terms.
#
# This license is subject to the following condition:
#
# The above copyright notice and either this complete permission notice or
# at a minimum a reference to the UPL must be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

'''
Script for printing the public IP address of a system.
Uses STUN (https://www.voip-info.org/wiki-STUN), implemented in
pystun.
'''

import sys
import argparse
import logging
try:
    import json
except ImportError:
    import simplejson as json
from oci_utils.packages.stun import get_ip_info, STUN_SERVERS, log as stun_log

def parse_args():
    '''
    Parse the command line arguments and return an object representing the
    command line (as returned by argparse's parse_args())
    '''
    parser = argparse.ArgumentParser(description='Utility for displaying the '
                                     'public IP address of the current OCI '
                                     'instance.', add_help=False)
    parser.add_argument('-h', '--human-readable', action='store_true',
                        help='Display human readable output (default)')
    parser.add_argument('-j', '--json', action='store_true',
                        help='Display json output')
    parser.add_argument('-g', '--get', action='store_true',
                        help='Print the IP address only')
    parser.add_argument('-s', '--sourceip', action='store', default="0.0.0.0",
                        help='specify the source IP address to use'),
    parser.add_argument('-S', '--stun-server', action='store',
                        help='specify the STUN server to use'),
    parser.add_argument('-L', '--list-servers', action='store_true',
                        help='print a list of known STUN servers and exit'),
    parser.add_argument('--debug', action='store_true',
                        help='display diagnostic output'),
    parser.add_argument('--help', action='help',
                        help='Display this help')

    args = parser.parse_args()
    return args

def main():
    '''
    Main program.
    '''

    args = parse_args()

    if args.debug:
        debug_handler = logging.StreamHandler(stream=sys.stderr)
        stun_log.addHandler(debug_handler)
        stun_log.setLevel(logging.DEBUG)

    if args.list_servers:
        # print the list of known STUN servers and exit
        for server in STUN_SERVERS:
            print server
        sys.exit(0)

    # call to pystun
    external_ip = get_ip_info(source_ip=args.sourceip,
                              stun_host=args.stun_server)[1]

    if external_ip is not None:
        if args.json:
            print json.dumps({'publicIp': external_ip})
        elif args.get:
            print external_ip
        else:
            print "Public IP address: %s" % external_ip

        return 0
    else:
        sys.stderr.write("Failed to determine public IP address.\n")
        return 1

sys.exit(main())
