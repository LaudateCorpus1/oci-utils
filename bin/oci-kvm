#!/usr/bin/env python2.7

# oci-utils
#
# Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at http://oss.oracle.com/licenses/upl.

'''
This utility automates the creation and configuration of KVM virtual
machines on Oracle Cloud Infrastructure instances.  See the manual
page for more information.
'''

import oci_utils.kvm.virt
import sys
import argparse

_create = 'create'
_destroy = 'destroy'

def parse_args():
    '''
    Parse the command line arguments and return an object representing the
    command line (as returned by argparse's parse_args())
    '''
    parser = argparse.ArgumentParser(description='Utility for creating and '
                                                 'managing KVM virtual machines '
                                                 'on an OCI instance.',
                                                 add_help=False)
    subparser = parser.add_subparsers(dest='mode')
    create_parser = subparser.add_parser(_create,
                                         help='Create a new virtual machine')
    destroy_parser = subparser.add_parser(_destroy,
                                          help='Destroy an existing virtual machine')
    create_parser.add_argument('-d', '--disk', action='store', type=str,
                               help='Path to the root disk of the VM')
    create_parser.add_argument('-n', '--net', action='store', type=str,
                               help='IP of the VNIC that should be attached to the VM')
    create_parser.add_argument('-D', '--domain', action='store', type=str,
                               help='Name of the virtual machine',
                               required=True)
    create_parser.add_argument('-V', '--virt', nargs=argparse.REMAINDER,
                               help='Additional arguments to provide to virt-install.  All arguments that appear after this one will be passed unmodified into virt-install, even if they are arguments that oci-kvm would otherwise understand.',
                               required=True)

    destroy_parser.add_argument('-D', '--domain', action='store', type=str,
                                help='Name of the virtual machine',
                                required=True)

    return parser.parse_args()

def create_vm(args):
    return oci_utils.kvm.virt.create(args.domain, args.disk, args.net, args.virt)

def destroy_vm(args):
    oci_utils.kvm.virt.destroy(args.domain)
    return 0

def main():
    '''
    Main program.
    '''
    subcommands = {_create: create_vm, _destroy: destroy_vm}

    args = parse_args()

    return subcommands[args.mode](args)

sys.exit(main())
