#!/usr/bin/env python2.7

# oci-utils
#
# Copyright (c) 2017 Oracle and/or its affiliates. All rights reserved.
#
# The Universal Permissive License (UPL), Version 1.0
#
# Subject to the condition set forth below, permission is hereby granted to
# any person obtaining a copy of this software, associated documentation
# and/or data (collectively the "Software"), free of charge and under any
# and all copyright rights in the Software, and any and all patent rights
# owned or freely licensable by each licensor hereunder covering either
# (i) the unmodified Software as contributed to or provided by such licensor, or
# (ii) the Larger Works (as defined below), to deal in both
# (a) the Software, and
# (b) any piece of software and/or hardware listed in the lrgrwrks.txt
# file if one is included with the Software (each a "Larger Work" to which
# the Software is contributed by such licensors),
#
# without restriction, including without limitation the rights to copy,
# create derivative works of, display, perform, and distribute the Software
# and make, use, sell, offer for sale, import, export, have made, and have
# sold the Software and the Larger Work(s), and to sublicense the foregoing
# rights on either these or other terms.
#
# This license is subject to the following condition:
#
# The above copyright notice and either this complete permission notice or
# at a minimum a reference to the UPL must be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

'''
This utility automates the creation and configuration of KVM virtual
machines on Oracle Cloud Infrastructure instances.  See the manual
page for more information.
'''

import oci_utils.virt
import sys
import argparse

_create = 'create'
_destroy = 'destroy'

def parse_args():
    '''
    Parse the command line arguments and return an object representing the
    command line (as returned by argparse's parse_args())
    '''
    parser = argparse.ArgumentParser(description='Utility for creating and '
                                                 'managing KVM virtual machines '
                                                 'on an OCI instance.',
                                                 add_help=False)
    subparser = parser.add_subparsers(dest='mode')
    create_parser = subparser.add_parser(_create,
                                         help='Create a new virtual machine')
    destroy_parser = subparser.add_parser(_destroy,
                                          help='Destroy an existing virtual machine')
    create_parser.add_argument('-d', '--disk', action='store', type=str,
                               help='Path to the root disk of the VM')
    create_parser.add_argument('-n', '--net', action='store', type=str,
                               help='IP of the VNIC that should be attached to the VM')
    create_parser.add_argument('-D', '--domain', action='store', type=str,
                               help='Name of the virtual machine',
                               required=True)
    create_parser.add_argument('-V', '--virt', nargs=argparse.REMAINDER,
                               help='Additional arguments to provide to virt-install.  All arguments that appear after this one will be passed unmodified into virt-install, even if they are arguments that oci-kvm would otherwise understand.',
                               required=True)

    destroy_parser.add_argument('-D', '--domain', action='store', type=str,
                                help='Name of the virtual machine',
                                required=True)

    return parser.parse_args()

def create_vm(args):
    #oci_utils.virt.create(args.domain, args.cpus, args.mem, args.disk, args.net, args.install_media, args.password)
    return oci_utils.virt.create(args.domain, args.disk, args.net, args.virt)

def destroy_vm(args):
    oci_utils.virt.destroy(args.domain)
    return 0

def main():
    '''
    Main program.
    '''
    subcommands = {_create: create_vm, _destroy: destroy_vm}

    args = parse_args()

    return subcommands[args.mode](args)

sys.exit(main())
