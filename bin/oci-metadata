#!/usr/bin/env python2.7

# oci-utils
#
# Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at http://oss.oracle.com/licenses/upl.

'''
This utility displays instance metadata when run on Oracle Cloud Infrastructure
instances.  See the manual page for more information.
'''

import sys
import argparse
import logging
import time
try:
    import json
except ImportError:
    import simplejson as json

import oci_utils.metadata

oci_api_url = 'http://169.254.169.254/opc/v1/'
oci_metadata_detail = {
    'display_name': 'Display Name',
    'hostname_label': 'Hostname Label',
    'time_created': 'Created at',
    'image_id': 'Image ID',
    'image': 'Image ID',
    'lifecycle_state': 'Lifecycle State',
    'shape': 'Instance shape',
    'region': 'Region',
    'availability_domain': 'Availability Domain',
    'compartment_id': 'Compartment OCID',
    'id': 'OCID',
    'mac_address': 'MAC address',
    'subnet_cidr_block': 'Subnet CIDR block',
    'subnet_id': 'Subnet ID',
    'vnic_id': 'VNIC OCID',
    'private_ip': 'Private IP address',
    'public_ip': 'Public IP address',
    'fault_domain': 'Fault domain',
    'virtual_router_ip': 'Virtual router IP address',
    'vlan_tag': 'VLAN Tag',
    'nic_index': 'NIC Index',
    'metadata': 'Metadata', 
    'defined_tags': 'Defined Tags',
    'freeform_tags': 'Freeform Tags',
    'extended_metadata': 'Extended Metadata',
    'launch_mode': 'Launch Mode',
    'ipxe_script': 'iPXE Script',
    'source_details': 'Source Details',
    'launch_options': 'Launch Options',
    'hostname_label': 'Hostname Label',
    'skip_source_dest_check':'Skip Source/Dest Check',
    }

oci_regions = {
    'phx': 'phx - us-phoenix-1 (Phoenix, AZ, USA)',
    'iad': 'iad - us-ashburn-1 (Ashburn, VA, USA)',
    'fra': 'fra - eu-frankfurt-1 (Frankfurt, Germany)',
    'lhr': 'lhr - uk-london-1 (London, UK)'
    }

oci_metadata_display_order = [
    'display_name', 'region', 'availability_domain', 'fault_domain',
    'id', 'compartment_id', 'shape', 'image_id','time_created', 'lifecycle_state',
    'private_ip', 'public_ip','mac_address', 'subnet_cidr_block', 'virtual_router_ip',
    'launch_options','vnic_id', 'defined_tags','freeform_tags', 'extended_metadata',
    'vlan_tag','nic_index','subnet_id'
    ]

#Notes: complex can be json formatted string or file.
settable_fields_type={
    'display_name': 'str',
    'defined_tags': 'dict',
    'freeform_tags': 'dict',
    'metadata': 'dict',
    'extended_metadata': 'dict'
    }

def parse_args():
    '''
    Parse the command line arguments and return an object representing the
    command line (as returned by argparse's parse_args())
    '''
    parser = argparse.ArgumentParser(description='Utility for displaying '
                                     'metadata for an instance running in '
                                     'the Oracle Cloud Infrastructure.',
                                     add_help=False)
    parser.add_argument('-h', '--human-readable', action='store_true',
                        help='Display human readable output (default)')
    parser.add_argument('-j', '--json', action='store_true',
                        help='Display json output')
    parser.add_argument('-g', '--get', metavar='KEY', dest='keys',
                        action='append', type=str.lower,
                        help='Display the value of a specific key')
    parser.add_argument('-u', '--update', metavar='KEY', dest='setkeys',
                        action='append', type=str.lower,
                        help='Update the value for the specific key')
    parser.add_argument('-i', '--instance-id', metavar='OCID',
                        action='store', type=str,
                        help='get or set metadata for the specified instance')
    parser.add_argument('--debug', action='store_true',
                        help=argparse.SUPPRESS)
    parser.add_argument('--help', action='help',
                        help='Display this help')

    args = parser.parse_args()
    return args


def pretty_print_section(metadata, indent):
    """
    Display a section of the metadata, indented by the given indent string
    """
    # first display the keys that are in the oci_metadata_display_order list
    if type(metadata) is not dict:
        for element in list(metadata):
            if type(element) is dict:
                pretty_print_section(element, indent + "  " )
            else:
                #if type(element) is str: 
                print "%s%s" % (indent, element)
    for key in oci_metadata_display_order:
        if key not in metadata:
            continue

        display_key = key
        if key in oci_metadata_detail:
            display_key = oci_metadata_detail[key]
        value = metadata[key]
        
        if type(metadata[key]) is dict:
            print "%s%s:" % (indent, display_key) 
            pretty_print_section(value, indent + "  ")
            continue

        if key == 'region':
            if value in oci_regions:
                value = oci_regions[value]
        elif key == 'timeCreated':
           # value = time.strftime('%Y-%m-%d %H:%M:%S UTC',
           #                       time.gmtime(metadata['timeCreated']/1000))
           pass
        print "%s%s: %s" % (indent, display_key, value)

    for key in metadata:
        # already printed the ones in oci_metadata_display_order
        if key in oci_metadata_display_order:
            continue
        # print it last unless it's listed in oci_metadata_display_order
        if key == 'metadata':
            continue
        display_key = key
        if key in oci_metadata_detail:
            display_key = oci_metadata_detail[key]

        value = metadata[key]

        if type(metadata[key]) is dict:
            print "%s%s:" % (indent, display_key) 
            pretty_print_section(value, indent + "  ")
            continue

        print "%s%s: %s" % (indent, display_key, value)

    # print it last unless it's listed in oci_metadata_display_order
    if key == 'metadata' and key not in oci_metadata_display_order:
        print "%sInstance Metadata:" % indent
        pretty_print_section(metadata['metadata'], indent + "  ")

def pretty_print(metadata):
    if 'instance' in metadata:
        print "Instance details:"
        pretty_print_section(metadata['instance'], '  ')


    if 'publicIp' in metadata or 'vnics' in metadata:
        print "Networking details:"

        if 'publicIp' in metadata:
            print "  Public IP address: %s" % metadata['publicIp']

        if 'vnics' in metadata:
            if len(metadata['vnics']) > 1:
                if_num = 1
                for vnic_data in metadata['vnics']:
                    print "  VNIC %s:" % if_num
                    pretty_print_section(vnic_data, '    ')
                    if_num += 1
            else:
                pretty_print_section(metadata['vnics'][0], '  ')

def dumper(obj):
    try:
        return obj.toJSON()
    except: 
        try:
            return obj.__dict__()
        except:
            return obj.__str__()


def main():
    '''
    Main program
    '''
    args = parse_args()

    metadata = None

    instId = None
    if args.instance_id:
	    instId = args.instance_id

    metadata = oci_utils.metadata.metadata(instance_id=instId, debug=args.debug,
                                  get_public_ip=False).filter(args.keys)

    if metadata is None:
        if args.keys:
            print "No matching metadata for %s found." % args.keys
        else:
            print "No metadata found."
        return 1
   

    if args.json:
        print json.dumps(metadata,  default=dumper, indent=2)
        return 0
    else:
        pretty_print(metadata)
        return 0

sys.exit(main())

