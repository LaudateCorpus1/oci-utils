#!/usr/bin/env python2.7

# oci-utils
#
# Copyright (c) 2017 Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at http://oss.oracle.com/licenses/upl.

'''
This utility displays instance metadata when run on Oracle Cloud Infrastructure
instances.  See the manual page for more information.
'''

import sys
import argparse
import logging
import time
try:
    import json
except ImportError:
    import simplejson as json

import oci_utils

oci_api_url = 'http://169.254.169.254/opc/v1/'
oci_metadata_detail = {
    'displayName': 'Instance name',
    'timeCreated': 'Instance created at',
    'image': 'Image ID',
    'state': 'Instance state',
    'shape': 'Instance shape',
    'region': 'Region',
    'availabilityDomain': 'Availability Domain',
    'image': 'Image OCID',
    'compartmentId': 'Compartment OCID',
    'id': 'Instance OCID',
    'macAddr': 'MAC address',
    'subnetCidrBlock': 'Subnet CIDR block',
    'vnicId': 'VNIC OCID',
    'privateIp': 'Private IP address',
    'publicIp': 'Public IP address',
    'virtualRouterIp': 'Virtual router IP address',
    'vlanTag': 'VLAN tag'
    }
oci_regions = {
    'phx': 'phx (Phoenix, AZ, USA)',
    'iad': 'iad (Ashburn, VA, USA)',
    'fra': 'fra (Frankfurt, Germany)'
    }
oci_metadata_display_order = [
    'displayName', 'region', 'availabilityDomain',
    'shape', 'timeCreated', 'state',
    'id',
    'privateIp', 'macAddr', 'subnetCidrBlock', 'virtualRouterIp', 'vnicId'
    ]

def parse_args():
    '''
    Parse the command line arguments and return an object representing the
    command line (as returned by argparse's parse_args())
    '''
    parser = argparse.ArgumentParser(description='Utility for displaying '
                                     'metadata for an instance running in '
                                     'the Oracle Cloud Infrastructure.',
                                     add_help=False)
    parser.add_argument('-h', '--human-readable', action='store_true',
                        help='Display human readable output (default)')
    parser.add_argument('-j', '--json', action='store_true',
                        help='Display json output')
    parser.add_argument('-g', '--get', metavar='KEY', dest='keys',
                        action='append', type=str.lower,
                        help='Display the value of a specific key')
    parser.add_argument('--debug', action='store_true',
                        help='display diagnostic output'),
    parser.add_argument('--help', action='help',
                        help='Display this help')

    args = parser.parse_args()
    return args


def pretty_print_section(metadata, indent):
    """
    Display a section of the metadata, indented by the given indent string
    """
    # first display the keys that are in the oci_metadata_display_order list
    if type(metadata) is not dict:
        for element in list(metadata):
            pretty_print_section(element, indent)
    for key in oci_metadata_display_order:
        if key not in metadata:
            continue
        if key == 'metadata':
            print "%sInstance Metadata:" % indent
            pretty_print_section(metadata['metadata'], indent + "  ")
            continue
        display_key = key
        if key in oci_metadata_detail:
            display_key = oci_metadata_detail[key]

        value = metadata[key]
        if key == 'region':
            if value in oci_regions:
                value = oci_regions[value]
        elif key == 'timeCreated':
            value = time.strftime('%Y-%m-%d %H:%M:%S UTC',
                                  time.gmtime(metadata['timeCreated']/1000))
        print "%s%s: %s" % (indent, display_key, value)

    for key in metadata:
        # already printed the ones in oci_metadata_display_order
        if key in oci_metadata_display_order:
            continue
        # print it last unless it's listed in oci_metadata_display_order
        if key == 'metadata':
            continue
        display_key = key
        if key in oci_metadata_detail:
            display_key = oci_metadata_detail[key]

        value = metadata[key]

        print "%s%s: %s" % (indent, display_key, value)

    # print it last unless it's listed in oci_metadata_display_order
    if key == 'metadata' and key not in oci_metadata_display_order:
        print "%sInstance Metadata:" % indent
        pretty_print_section(metadata['metadata'], indent + "  ")

def pretty_print(metadata):
    if 'instance' in metadata:
        print "Instance details:"
        pretty_print_section(metadata['instance'], '  ')


    if 'publicIp' in metadata or 'vnics' in metadata:
        print "Networking details:"

        if 'publicIp' in metadata:
            print "  Public IP address: %s" % metadata['publicIp']

        if 'vnics' in metadata:
            if len(metadata['vnics']) > 1:
                if_num = 1
                for vnic_data in metadata['vnics']:
                    print "  VNIC %s:" % if_num
                    pretty_print_section(vnic_data, '    ')
                    if_num += 1
            else:
                pretty_print_section(metadata['vnics'][0], '  ')

def main():
    '''
    Main program
    '''
    args = parse_args()

    metadata = oci_utils.metadata(debug=args.debug).filter(args.keys)

    if metadata is None:
        if args.keys:
            print "No matching metadata found."
        else:
            print "No metadata found."
        return 1

    if args.json:
        print(json.dumps(metadata))
        return 0
    else:
        pretty_print(metadata)
        return 0

sys.exit(main())

