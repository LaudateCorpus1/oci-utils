#!/usr/bin/env python2.7

# oci-utils
#
# Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at http://oss.oracle.com/licenses/upl.

'''
This utility assists with configuring iscsi storage on Oracle Cloud
Infrastructure instances.  See the manual page for more information.
'''

import os
import sys
import posixfile
import argparse
import json
import subprocess
from datetime import timedelta
from oci_utils import iscsiadm, lsblk, metadata, __ignore_file
from oci_utils.cache import load_cache, write_cache
import oci_utils.oci_api

def parse_args():
    '''
    Parse the command line arguments and return an object representing the
    command line (as returned by argparse's parse_args())
    '''
    parser = argparse.ArgumentParser(description='Utility for listing or '
                                     'configuring iSCSI devices on an OCI '
                                     'instance.', add_help=False)
    parser.add_argument('-i', '--interactive', action='store_true',
                        help='Run in interactive mode')
    parser.add_argument('-s', '--show', action='store_true',
                        help='Display the current iscsi configuration')
    parser.add_argument('-d', '--detach', metavar='TARGET', dest='detach_iqns',
                        action='append', type=str,
                        help='Detach the iSCSI device with the specified IQN')
    parser.add_argument('-a', '--attach', metavar='TARGET', dest='attach_iqns',
                        action='append', type=str,
                        help='Attach the iSCSI device with the specified IQN '
                        'or volume OCID')
    parser.add_argument('-c', '--create-volume', metavar='SIZE', action='store',
                        type=int, help='Create a new volume and attach it to '
                        'this instance. SIZE is in gigabytes. Use --volume-name'
                        ' to specify a name for the volume.')
    parser.add_argument('--volume-name', metavar='NAME', action='store',
                        type=str, help='When used with --create-volume, '
                        'set the name of the new volume to NAME')
    #parser.add_argument('--use-chap', action='store_true',
    #                    help='Use CHAP authentication when attaching an '
    #                    'OCI volume to this instance.')
    parser.add_argument('--username', metavar='USER', action='store',
                        type=str,
                        help='Use USER as the user name when attaching a ' \
                        'device that requires CHAP authentication')
    parser.add_argument('--password', metavar='PASSWD', action='store',
                        type=str,
                        help='Use PASSWD as the password when attaching a '
                        'device that requires CHAP authentication')
    parser.add_argument('--debug', action='store_true',
                        help='display diagnostic output'),
    parser.add_argument('--help', action='help',
                        help='Display this help')

    args = parser.parse_args()
    return args

def ask_yes_no(question):
    """
    Ask the user a question and enforce a yes/no answer.
    Return True for yes, False for no.
    """
    while True:
        print question
        ans=raw_input().lower()
        if ans in ['y', 'yes']:
            return True
        if ans in ['n', 'no']:
            return False
        print "Invalid answer, please answer with yes or no"
            
def get_instance_ocid():
    md = metadata().filter('instance')
    if 'instance' in md and 'id' in md['instance']:
        return md['instance']['id']
    else:
        return '<instance OCID>'

def nvl(value, defval="Unknown"):
    """
    return defval if value is None or empty, otherwise return value
    """
    if value is None:
        return defval
    if not value:
        return defval
    return value

def ocid_refresh(wait=False):
    """
    run ocid --refresh to update cached information
    """
    try:
        if wait:
            subprocess.check_call(['/usr/libexec/ocid',
                                   '--refresh', '--no-daemon'])
        else:
            subprocess.check_call(['/usr/libexec/ocid',
                                   '--refresh'])
        return True
    except subprocess.CalledProcessError as e:
        return False
    

def display_current_devices(session, disks):
    oci_sess = None
    if oci_utils.oci_api.HAVE_OCI_SDK:
        try:
            oci_sess = oci_utils.oci_api.OCISession()
        except:
            pass
    if session:
        print "Currently attached iSCSI devices:"
        for iqn in session.keys():
            oci_vol = None
            if oci_sess is not None:
                oci_vols = oci_sess.find_volumes(iqn=iqn)
                if len(oci_vols) == 1:
                    oci_vol = oci_vols[0]
            print
            print "Target %s" % iqn
            if oci_vol is not None:
                print "         Volume name:    %s" % oci_vol.get_display_name()
                print "         Volume OCID:    %s" % oci_vol.get_ocid()
            print "   Persistent portal:    %s:%s" % \
                (session[iqn]['persistent_portal_ip'],
                 session[iqn]['persistent_portal_port'])
            print "      Current portal:    %s:%s" % \
                (session[iqn]['current_portal_ip'],
                 session[iqn]['current_portal_port'])
            print "               State:    %s" % session[iqn]['state']
            device = session[iqn]['device']
            print "     Attached device:    %s" % device
            if device in disks:
                print "                Size:    %s" % disks[device]['size']
                if not 'partitions' in disks[device]:
                    print "    File system type:    %s" % \
                        nvl(disks[device]['fstype'])
                    print "          Mountpoint:    %s" % \
                        nvl(disks[device]['mountpoint'], "Not mounted")
                else:
                    print "          Partitions:    " \
                        "Device  %6s  %10s   Mountpoint" % \
                        ("Size", "Filesystem")
                    partitions = disks[device]['partitions']
                    plist = partitions.keys()
                    plist.sort()
                    for part in plist:
                        print "                         " \
                            "%s  %8s  %10s   %s" % \
                            (part, partitions[part]['size'],
                             nvl(partitions[part]['fstype'], "Unknown fs"),
                             nvl(partitions[part]['mountpoint'], "Not mounted")
                            )
        print

def display_attach_failed_device(iqn, targets, attach_failed):
    print
    print "Target %s" % iqn
    for ipaddr in targets.keys():
        if iqn in targets[ipaddr]:
            print "              Portal:    %s:%s" % (ipaddr, 3260)
            print "               State:    %s" % \
                iscsiadm.error_message_from_code(attach_failed[iqn])

def display_detached_device(iqn, targets):
    print
    print "Target %s" % iqn
    if targets:
        for ipaddr in targets.keys():
            if iqn in targets[ipaddr]:
                print "              Portal:    %s:%s" % (ipaddr, 3260)
    else:
        print "              Portal:    unknown (need ocid to determine)"

    print "               State:    Detached"
    
def do_attach(iqn, targets, user=None, passwd=None):
    oci_sess = None
    if oci_utils.oci_api.HAVE_OCI_SDK:
        try:
            oci_sess = oci_utils.oci_api.OCISession()
        except:
            pass
    if oci_sess is not None:
        oci_vols = oci_sess.find_volumes(iqn=iqn)
        if len(oci_vols) == 1:
            user=oci_vols[0].get_user()
            passwd=oci_vols[0].get_password()
    portal_ip = None
    if targets is None:
        print "ocid must be running to determine the portal IP address " \
            "for this device"
        return 99
    for ipaddr in targets.keys():
        if iqn in targets[ipaddr]:
            portal_ip = ipaddr
    if portal_ip is None:
        # this shouldn't really happen, but just in case
        print "Can't find portal IP address"
        return 99
    retval = iscsiadm.attach(portal_ip, 3260, iqn,
                             user, passwd,
                             auto_startup=True)
    print "Result: %s" \
        % iscsiadm.error_message_from_code(retval)
    return retval

def api_display_available_devices():
    sess = None
    # needs the OCI SDK installed and configured
    try:
        sess = oci_utils.oci_api.OCISession()
    except oci_utils.oci_api.OCISDKError as e:
        sys.stderr.write("Failed to access OCI services: %s\n" % e)
        return

    vols = sess.all_volumes()
    if len(vols) == 0:
        print "No additional storage volumes found."
        return

    print "All available storage volumes:"
    print

    for vol in vols:
        print "Volume %s" % vol.get_display_name()
        print "   odid:        %s" % vol.get_ocid()
        if vol.is_attached():
            if vol.get_instance().get_ocid() == sess.this_instance().get_ocid():
                instance = "this instance"
            else:
                instance = "instance %s (%s)" % \
                           (vol.get_instance().get_display_name(),
                            vol.get_instance().get_public_ip())
            print "   attached to: %s" % instance
        else:
            print "   attached to: (not attached)"
        print "   size:        %s" % vol.get_size(format=vol.HUMAN)
        print

def do_attach_ocid(ocid):
    '''
    Make API calls to attach a volume with the given OCID to this instance
    '''
    if not oci_utils.oci_api.HAVE_OCI_SDK:
        sys.stderr.write("To connect a volume using its OCID you need to "
                         "install and configure the OCI Python SDK "
                         "(python-oci-sdk)\n")
        return False
    sess = None
    try:
        sess = oci_utils.oci_api.OCISession()
    except oci_utils.oci_api.OCISDKError as e:
        sys.stderr.write("Failed to access OCI services: %s\n" % e)
        return False
    vol = sess.get_volume(ocid)
    if vol is None:
        sys.stderr.write("Volume %s not found.\n" % ocid)
        return False

    if vol.is_attached():
        if vol.get_instance().get_ocid() == sess.this_instance().get_ocid():
            # attached to this instance already
            print "Volume %s already attached to this instance." % \
                ocid
            return True
        else:
            sys.stderr.write("Volume %s\nis currently attached to "
                             "instance %s (%s)\n" % \
                             (ocid, vol.get_instance().get_display_name(),
                              vol.get_instance().get_public_ip()))
            return False
    print "Attaching OCI Volume to this instance."
    vol = vol.attach_to(instance_id=sess.this_instance().get_ocid(), wait=True)

    if os.geteuid() != 0:
        if vol.get_user() is not None:
            # requires CHAP auth user/password
            sys.stderr.write("Run oci-iscsi-config with root privileges "
                             "to attach this device.\n")
            return False
        else:
            # ocid will attach it automatically
            return True

    # attach using iscsiadm commands
    print "Attaching iSCSI device"
    retval = iscsiadm.attach(ipaddr=vol.get_portal_ip(),
                             port=vol.get_portal_port(),
                             iqn=vol.get_iqn(),
                             username=vol.get_user(),
                             password=vol.get_password(),
                             auto_startup=True)
    print "Result: %s" \
        % iscsiadm.error_message_from_code(retval)
    if retval == 0:
        return True

    return False

def api_detach(iqn):
    '''
    Detach the given volume from the instance using OCI API calls
    '''
    sess = None
    try:
        sess = oci_utils.oci_api.OCISession()
    except oci_utils.oci_api.OCISDKError as e:
        sys.stderr.write("Failed to access OCI services: %s\n" % e)
        return False
    for v in sess.this_instance().all_volumes():
        if v.get_iqn() == iqn:
            try:
                print "Detaching volume"
                v.detach()
                return True
            except oci_utils.oci_api.OCISDKError as e:
                sys.stderr.write("Failed to disconnect volume %s from this "
                                 "instance: %s\n" % (iqn, e))
                return False
    sys.stderr.write("Volume not found...\n")
    return False

def do_umount(mountpoint, warn=True):
    if os.geteuid() != 0:
        if warn:
            sys.stderr.write("Volume mounted.  Run this utility with root "
                             "privileges or run this command:\n")
        sys.stderr.write("  sudo umount %s\n" % mountpoint)
        return False

    output = ''
    try:
        print "Unmounting %s" % mountpoint
        subprocess.check_output(['/usr/bin/umount',
                                          mountpoint],
                                         stderr=subprocess.STDOUT)
        return True
    except subprocess.CalledProcessError as e:
        sys.stderr.write("Failed to unmount %s: %s\n" % \
                         (mountpoint, e.output))
        return False

def unmount_device(session, iqn, disks):
    '''
    Check if any partitions of the device with the given iqn are mounted
    and if so attempt to unmount them.
    Return True for success of if the device isn't mounted
    Return False if the device is mount and unmounting failed
    '''
    retval = True
    # find mountpoints
    device = session[iqn]['device']
    if device not in disks:
        return True
    if not 'partitions' in disks[device]:
        if disks[device]['mountpoint'] != '':
            # volume has not partitions and is currently mounted
            if not do_umount(disks[device]['mountpoint'], warn=retval):
                retval = False
    else:
        partitions = disks[device]['partitions']
        for part in partitions.keys():
            if partitions[part]['mountpoint'] != '':
                # the partition is mounted
                if not do_umount(partitions[part]['mountpoint'], warn=retval):
                    retval = False
    return retval

def do_create_volume(size, display_name, use_chap=False):
    '''
    User API calls to create a new OCI volume and attach it to this instance
    '''
    sess = None
    try:
        sess = oci_utils.oci_api.OCISession()
    except oci_utils.oci_api.OCISDKError as e:
        sys.stderr.write("Failed to access OCI services: %s\n" % e)
        return False

    # FIXME: use_chap
    vol = None
    try:
        print "Creating a new %d GB volume" % size
        vol = sess.this_instance().create_volume(size=size,
                                                 display_name=display_name)
    except oci_utils.oci_api.OCISDKError as e:
        sys.stderr.write("Failed to create volume: %s\n" % e)
        return False

    print "Volume %s created" % vol.get_display_name()

    if os.geteuid() == 0:
        # attach using iscsiadm commands
        print "Attaching iSCSI device"
        retval = iscsiadm.attach(ipaddr=vol.get_portal_ip(),
                                 port=vol.get_portal_port(),
                                 iqn=vol.get_iqn(),
                                 username=vol.get_user(),
                                 password=vol.get_password(),
                                 auto_startup=True)
    print "Result: %s" \
        % iscsiadm.error_message_from_code(retval)
    if retval == 0:
        return True

    return False

def main():
    '''
    Main program.
    '''

    args = parse_args()

    ocid_cache = load_cache(iscsiadm.ISCSIADM_CACHE,
                            max_age=timedelta(minutes = 2))[1]
    if ocid_cache is None:
        sys.stderr.write("For full functionality of this utility "
                         "the ocid service must be running\n")
        sys.stderr.write("The administrator can start it using this "
                         "command:\n")
        sys.stderr.write("    sudo systemctl start ocid.service\n")
        if os.geteuid() == 0:
            # run ocid once, to update the cache
            ocid_refresh(wait=True)
            # now try to load again
            ocid_cache = load_cache(iscsiadm.ISCSIADM_CACHE,
                                    max_age=timedelta(minutes = 2))[1]
    if ocid_cache is None:
        targets, attach_failed = None, None
    else:
        targets, attach_failed = ocid_cache
    disks = lsblk.list()
    session = iscsiadm.session()
    detached = load_cache(__ignore_file)[1]
    if detached is None:
        detached = []

    if args.create_volume:
        if not oci_utils.oci_api.HAVE_OCI_SDK:
            sys.stderr.write("You need to install and configure the "
                             "OCI Python SDK (python-oci-sdk) to use "
                             "the --create-volume option\n")
            sys.exit(1)

        if args.create_volume < 50:
            sys.stderr.write("Volume size must be at least 50GBs\n")
            sys.exit(1)
        # FIXME: use_chap
        retval= do_create_volume(size=args.create_volume,
                                 display_name=args.volume_name)
        session = iscsiadm.session()
        if args.show:
            display_current_devices(session, disks)
            api_display_available_devices()
        return retval

    if args.detach_iqns:
        if os.geteuid() != 0 and not oci_utils.oci_api.HAVE_OCI_SDK:
            sys.stderr.write("You must run this program with root privileges "
                             "to detach iSCSI devices.\n")
            sys.exit(1)

        write_ignore_file = False
        retval = 0
        do_refresh = False
        for iqn in args.detach_iqns:
            if iqn in detached:
                sys.stderr.write("Target %s is already detached\n" % iqn)
                retval = 1
                continue
            if iqn not in session:
                sys.stderr.write("Target %s not found\n" % iqn)
                retval = 1
                continue
            if 'boot:uefi' in iqn:
                sys.stderr.write("IQN %s is the boot device, cannot detach.\n" \
                                 % iqn)
                retval = 1
                continue
            if not unmount_device(session, iqn, disks):
                if args.interactive:
                    cont = ask_yes_no("Failed to unmount volume.  "
                                      "Continue detaching anyway?")
                    if not cont:
                        sys.exit(1)
                else:
                    sys.exit(1)
            api_detached = False
            if oci_utils.oci_api.HAVE_OCI_SDK:
                api_detached = api_detach(iqn)
            if os.geteuid() != 0:
                # can't detach with iscsiadm without root privileges,
                # but ocid will take care of it anyway
                continue
            if not iscsiadm.detach(session[iqn]['persistent_portal_ip'],
                                   session[iqn]['persistent_portal_port'],
                                   iqn):
                sys.stderr.write("Failed to detach target %s\n" % iqn)
                retval = 1
            else:
                if not api_detached:
                    detached.append(iqn)
                    write_ignore_file = True
                    do_refresh = True
        if write_ignore_file:
            write_cache(cache_content=detached,
                        cache_fname=__ignore_file)
        if do_refresh:
            ocid_refresh()
        return retval

    if args.attach_iqns:
        retval = 0
        write_ignore_file = False
        do_refresh = False
        for iqn in args.attach_iqns:
            if iqn.startswith('ocid1.volume.oc'):
                # it's an OCID
                if not do_attach_ocid(iqn):
                    retval = 1
                continue
            if os.geteuid() != 0:
                sys.stderr.write("You must run this program with root "
                                 "privileges to attach iSCSI devices.\n")
                sys.exit(1)
            if iqn in session:
                print "Target %s is already attached." % iqn
                continue
            if iqn not in detached and iqn not in attach_failed:
                sys.stderr.write("Target %s not found\n" % iqn)
                retval = 1
                continue
            if do_attach(iqn, targets,
                         user=args.username, passwd=args.password) != 0:
                sys.stderr.write("Failed to attach target %s\n" % iqn)
                retval = 1
            else:
                do_refresh = True
                if iqn in detached:
                    detached.remove(iqn)
                write_ignore_file = True
        if write_ignore_file:
            write_cache(cache_content=detached,
                        cache_fname=__ignore_file)
        if do_refresh:
            ocid_refresh()

        return retval
    
    if args.show:
        display_current_devices(session, disks)
        if oci_utils.oci_api.HAVE_OCI_SDK:
            api_display_available_devices()
        
    if detached:
        print
        print "Detached devices:"

        do_refresh = False
        write_ignore_file = False
        for iqn in detached:
            display_detached_device(iqn, targets)
            if args.interactive:
                if os.geteuid() != 0:
                    print "You must run this program with root privileges " \
                        "to attach iSCSI devices.\n"
                    ans = False
                else:
                    ans = ask_yes_no("Would you like to attach this device?")
                if ans:
                    retval = do_attach(iqn, targets)
                    do_refresh = True
                    if retval == 24:
                        # authentication error
                        attach_failed[iqn] = 24
                    if iqn in detached:
                        detached.remove(iqn)
                        write_ignore_file = True
        if write_ignore_file:
            write_cache(cache_content=detached,
                        cache_fname=__ignore_file)
        if do_refresh:
            ocid_refresh()

    if attach_failed:
        print
        print "Devices that could not be attached automatically:"

        auth_errors = 0
        for iqn in attach_failed.keys():
            if attach_failed[iqn] == 24:
                auth_errors += 1

        for iqn in attach_failed.keys():
            display_attach_failed_device(iqn, targets, attach_failed)
            do_refresh = False
            if args.interactive:
                if attach_failed[iqn] != 24:
                    # not authentication error
                    ans = True
                    while ans:
                        if os.geteuid() != 0:
                            print "You must run this program with root " \
                                "privileges to attach iSCSI devices.\n"
                            ans = False
                        else:
                            ans = ask_yes_no("Would you like to retry "
                                             "attaching this device?")
                        if ans:
                            retval = do_attach(iqn, targets)
                            if retval == 0:
                                ans = False
                                do_refresh = True
                        else:
                            ans = False
                else:
                    # authentication error
                    if os.geteuid() != 0:
                        print "You must run this program with root " \
                            "privileges to configure iSCSI devices.\n"
                        ans = False
                    else:
                        ans = ask_yes_no("Would you like to configure this "
                                         "device?")
                    if ans:
                        if oci_utils.oci_api.HAVE_OCI_SDK:
                            # try and get the user and password from the API
                            retval = do_attach(iqn, targets, None, None)
                        if retval == 0:
                            print "Device configured automatically."
                            do_refresh = True
                        else:
                            myocid = get_instance_ocid()
                            while ans:
                                print "To find the CHAP username and " \
                                    "password for this device, go to"
                                print "https://console.us-phoenix-1." \
                                    "oraclecloud.com/#/a/compute/instances" \
                                    "/%s/disks?jt=listing" % \
                                    myocid
                                print "Select the Block Volume, then click " \
                                    "the \"iSCSI Commands & Information\" " \
                                    "button."
                                print "CHAP username:"
                                user = raw_input()
                                print "CHAP password:"
                                passwd = raw_input()
                                print "Attaching iSCSI device..."
                                retval = do_attach(iqn, targets, user, passwd)
                                if retval != 0:
                                    ans = ask_yes_no("Would you like to try "
                                                     "again?")
                                else:
                                    ans = False
                                    do_refresh = True
        if do_refresh:
            ocid_refresh()
        if not args.interactive and auth_errors:
            print
            print "Use the -i or --interactive mode to configure " \
                "devices that require authentication information"

    if not args.show and not attach_failed and not detached:
        print "All known devices are attached."
        print "Use the -s or --show option for details."

    return 0


sys.exit(main())
