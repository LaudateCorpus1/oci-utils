#!/usr/bin/env python2.7

# oci-utils
#
# Copyright (c) 2017 Oracle and/or its affiliates. All rights reserved.
#
# The Universal Permissive License (UPL), Version 1.0
#
# Subject to the condition set forth below, permission is hereby granted to
# any person obtaining a copy of this software, associated documentation
# and/or data (collectively the "Software"), free of charge and under any
# and all copyright rights in the Software, and any and all patent rights
# owned or freely licensable by each licensor hereunder covering either
# (i) the unmodified Software as contributed to or provided by such licensor, or
# (ii) the Larger Works (as defined below), to deal in both
# (a) the Software, and
# (b) any piece of software and/or hardware listed in the lrgrwrks.txt
# file if one is included with the Software (each a "Larger Work" to which
# the Software is contributed by such licensors),
#
# without restriction, including without limitation the rights to copy,
# create derivative works of, display, perform, and distribute the Software
# and make, use, sell, offer for sale, import, export, have made, and have
# sold the Software and the Larger Work(s), and to sublicense the foregoing
# rights on either these or other terms.
#
# This license is subject to the following condition:
#
# The above copyright notice and either this complete permission notice or
# at a minimum a reference to the UPL must be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

'''
This utility assists with configuring iscsi storage on Oracle Cloud
Infrastructure instances.  See the manual page for more information.
'''

import os
import sys
import posixfile
import argparse
import json
import subprocess
from datetime import timedelta
from oci_utils import iscsiadm, lsblk, metadata, __ignore_file
from oci_utils.cache import load_cache, write_cache

def parse_args():
    '''
    Parse the command line arguments and return an object representing the
    command line (as returned by argparse's parse_args())
    '''
    parser = argparse.ArgumentParser(description='Utility for listing or '
                                     'configuring iSCSI devices on an OCI '
                                     'instance.', add_help=False)
    parser.add_argument('-i', '--interactive', action='store_true',
                        help='Run in interactive mode')
    parser.add_argument('-s', '--show', action='store_true',
                        help='Display the current iscsi configuration')
    parser.add_argument('-d', '--detach', metavar='TARGET', dest='detach_iqns',
                        action='append', type=str,
                        help='Detach the iSCSI device with the specified IQN')
    parser.add_argument('-a', '--attach', metavar='TARGET', dest='attach_iqns',
                        action='append', type=str,
                        help='Attach the iSCSI device with the specified IQN')
    parser.add_argument('--username', metavar='USER', action='store',
                        type=str,
                        help='Use USER as the user name when attaching a ' \
                        'device that requires CHAP authentication')
    parser.add_argument('--password', metavar='PASSWD', action='store',
                        type=str,
                        help='Use PASSWD as the password when attaching a '
                        'device that requires CHAP authentication')
    parser.add_argument('--debug', action='store_true',
                        help='display diagnostic output'),
    parser.add_argument('--help', action='help',
                        help='Display this help')

    args = parser.parse_args()
    return args

def ask_yes_no(question):
    """
    Ask the user a question and enforce a yes/no answer.
    Return True for yes, False for no.
    """
    while True:
        print question
        ans=raw_input().lower()
        if ans in ['y', 'yes']:
            return True
        if ans in ['n', 'no']:
            return False
        print "Invalid answer, please answer with yes or no"
            
def get_instance_ocid():
    md = metadata().filter('instance')
    if 'instance' in md and 'id' in md['instance']:
        return md['instance']['id']
    else:
        return '<instance OCID>'

def nvl(value, defval="Unknown"):
    """
    return defval if value is None or empty, otherwise return value
    """
    if value is None:
        return defval
    if not value:
        return defval
    return value

def ocid_refresh(wait=False):
    """
    run ocid --refresh to update cached information
    """
    try:
        if wait:
            subprocess.check_call(['/usr/libexec/ocid',
                                   '--refresh', '--no-daemon'])
        else:
            subprocess.check_call(['/usr/libexec/ocid',
                                   '--refresh'])
        return True
    except subprocess.CalledProcessError as e:
        return False
    

def display_current_devices(session, disks):
    if session:
        print "Currently attached iSCSI devices:"
        for iqn in session.keys():
            print
            print "Target %s" % iqn
            print "   Persistent portal:    %s:%s" % \
                (session[iqn]['persistent_portal_ip'],
                 session[iqn]['persistent_portal_port'])
            print "      Current portal:    %s:%s" % \
                (session[iqn]['current_portal_ip'],
                 session[iqn]['current_portal_port'])
            print "               State:    %s" % session[iqn]['state']
            device = session[iqn]['device']
            print "     Attached device:    %s" % device
            if device in disks:
                print "                Size:    %s" % disks[device]['size']
                if not 'partitions' in disks[device]:
                    print "    File system type:    %s" % \
                        nvl(disks[device]['fstype'])
                    print "          Mountpoint:    %s" % \
                        nvl(disks[device]['mountpoint'], "Not mounted")
                else:
                    print "          Partitions:    " \
                        "Device  %6s  %10s   Mountpoint" % \
                        ("Size", "Filesystem")
                    partitions = disks[device]['partitions']
                    plist = partitions.keys()
                    plist.sort()
                    for part in plist:
                        print "                         " \
                            "%s  %8s  %10s   %s" % \
                            (part, partitions[part]['size'],
                             nvl(partitions[part]['fstype'], "Unknown fs"),
                             nvl(partitions[part]['mountpoint'], "Not mounted")
                            )
        print

def display_attach_failed_device(iqn, targets, attach_failed):
    print
    print "Target %s" % iqn
    for ipaddr in targets.keys():
        if iqn in targets[ipaddr]:
            print "              Portal:    %s:%s" % (ipaddr, 3260)
            print "               State:    %s" % \
                iscsiadm.error_message_from_code(attach_failed[iqn])

def display_detached_device(iqn, targets):
    print
    print "Target %s" % iqn
    if targets:
        for ipaddr in targets.keys():
            if iqn in targets[ipaddr]:
                print "              Portal:    %s:%s" % (ipaddr, 3260)
    else:
        print "              Portal:    unknown (need ocid to determine)"

    print "               State:    Detached"
    
def do_attach(iqn, targets, user=None, passwd=None):
    portal_ip = None
    if targets is None:
        print "ocid must be running to determine the portal IP address " \
            "for this device"
        return 99
    for ipaddr in targets.keys():
        if iqn in targets[ipaddr]:
            portal_ip = ipaddr
    if portal_ip is None:
        # this shouldn't really happen, but just in case
        print "Can't find portal IP address"
        return 99
    retval = iscsiadm.attach(portal_ip, 3260, iqn,
                             user, passwd,
                             auto_startup=True)
    print "Result: %s" \
        % iscsiadm.error_message_from_code(retval)
    return retval

def main():
    '''
    Main program.
    '''

    args = parse_args()

    ocid_cache = load_cache(iscsiadm.ISCSIADM_CACHE,
                            max_age=timedelta(minutes = 2))[1]
    if ocid_cache is None:
        sys.stderr.write("For full functionality of this utility "
                         "the ocid service must be running\n")
        sys.stderr.write("The administrator can start it using this "
                         "command:\n")
        sys.stderr.write("    sudo systemctl start ocid.service\n")
        if os.geteuid() == 0:
            # run ocid once, to update the cache
            ocid_refresh(wait=True)
            # now try to load again
            ocid_cache = load_cache(iscsiadm.ISCSIADM_CACHE,
                                    max_age=timedelta(minutes = 2))[1]
    if ocid_cache is None:
        targets, attach_failed = None, None
    else:
        targets, attach_failed = ocid_cache
    disks = lsblk.list()
    session = iscsiadm.session()
    detached = load_cache(__ignore_file)[1]
    if detached is None:
        detached = []

    if args.detach_iqns:
        if os.geteuid() != 0:
            sys.stderr.write("You must run this program with root privileges "
                             "to detach iSCSI devices.\n")
            sys.exit(1)

        write_ignore_file = False
        retval = 0
        do_refresh = False
        for iqn in args.detach_iqns:
            if iqn in detached:
                sys.stderr.write("Target %s is already detached\n" % iqn)
                retval = 1
                continue
            if iqn not in session:
                sys.stderr.write("Target %s not found\n" % iqn)
                retval = 1
                continue
            if 'boot:uefi' in iqn:
                sys.stderr.write("IQN %s is the boot device, cannot detach.\n" \
                                 % iqn)
                retval = 1
                continue                
            if not iscsiadm.detach(session[iqn]['persistent_portal_ip'],
                                   session[iqn]['persistent_portal_port'],
                                   iqn):
                sys.stderr.write("Failed to detach target %s" % iqn)
                retval = 1
            else:
                detached.append(iqn)
                write_ignore_file = True
                do_refresh = True
        if write_ignore_file:
            write_cache(cache_content=detached,
                        cache_fname=__ignore_file)
        if do_refresh:
            ocid_refresh()
        return retval

    if args.attach_iqns:
        if os.geteuid() != 0:
            sys.stderr.write("You must run this program with root privileges "
                             "to attach iSCSI devices.\n")
            sys.exit(1)

        write_ignore_file = False
        retval = 0
        for iqn in args.attach_iqns:
            if iqn in session:
                print "Target %s is already attached." % iqn
                continue
            if iqn not in detached and iqn not in attach_failed:
                sys.stderr.write("Target %s not found\n" % iqn)
                retval = 1
                continue
            if do_attach(iqn, targets,
                         user=args.username, passwd=args.password) != 0:
                sys.stderr.write("Failed to attach target %s" % iqn)
                retval = 1
            else:
                if iqn in detached:
                    detached.remove(iqn)
                write_ignore_file = True
        if write_ignore_file:
            write_cache(cache_content=detached,
                        cache_fname=__ignore_file)
        ocid_refresh()
        return retval

    if args.show:
        display_current_devices(session, disks)
        
    if detached:
        print
        print "Detached devices:"

        do_refresh = False
        write_ignore_file = False
        for iqn in detached:
            display_detached_device(iqn, targets)
            if args.interactive:
                if os.geteuid() != 0:
                    print "You must run this program with root privileges " \
                        "to attach iSCSI devices.\n"
                    ans = False
                else:
                    ans = ask_yes_no("Would you like to attach this device?")
                if ans:
                    retval = do_attach(iqn, targets)
                    do_refresh = True
                    if retval == 24:
                        # authentication error
                        attach_failed[iqn] = 24
                    if iqn in detached:
                        detached.remove(iqn)
                        write_ignore_file = True
        if write_ignore_file:
            write_cache(cache_content=detached,
                        cache_fname=__ignore_file)
        if do_refresh:
            ocid_refresh()

    if attach_failed:
        print
        print "Devices that could not be attached automatically:"

        auth_errors = 0
        for iqn in attach_failed.keys():
            if attach_failed[iqn] == 24:
                auth_errors += 1

        for iqn in attach_failed.keys():
            display_attach_failed_device(iqn, targets, attach_failed)
            do_refresh = False
            if args.interactive:
                if attach_failed[iqn] != 24:
                    # not authentication error
                    ans = True
                    while ans:
                        if os.geteuid() != 0:
                            print "You must run this program with root " \
                                "privileges to attach iSCSI devices.\n"
                            ans = False
                        else:
                            ans = ask_yes_no("Would you like to retry "
                                             "attaching this device?")
                        if ans:
                            retval = do_attach(iqn, targets)
                            print "Result: %s" \
                                % iscsiadm.error_message_from_code(retval)
                            if retval == 0:
                                ans = False
                                do_refresh = True
                        else:
                            ans = False
                else:
                    # authentication error
                    if os.geteuid() != 0:
                        print "You must run this program with root " \
                            "privileges to configure iSCSI devices.\n"
                        ans = False
                    else:
                        ans = ask_yes_no("Would you like to configure this "
                                         "device?")
                    if ans:
                        myocid = get_instance_ocid()
                        while ans:
                            print "To find the CHAP username and password " \
                                "for this device, go to"
                            print "https://console.us-phoenix-1.oraclecloud.com/#" \
                                "/a/compute/instances/%s/disks?jt=listing" % \
                                myocid
                            print "Select the Block Volume, then click the " \
                                "\"iSCSI Commands & Information\" button."
                            print "CHAP username:"
                            user = raw_input()
                            print "CHAP password:"
                            passwd = raw_input()
                            print "Attaching iSCSI device..."
                            retval = do_attach(iqn, targets, user, passwd)
                            print "Result: %s" \
                                % iscsiadm.error_message_from_code(retval)
                            if retval != 0:
                                ans = ask_yes_no("Would you like to try again?")
                            else:
                                ans = False
                                do_refresh = True
        if do_refresh:
            ocid_refresh()
        if not args.interactive and auth_errors:
            print
            print "Use the -i or --interactive mode to configure " \
                "devices that require authentication information"

    if not args.show and not attach_failed and not detached:
        print "All known devices are attached."
        print "Use the -s or --show option for details."

    return 0


sys.exit(main())
